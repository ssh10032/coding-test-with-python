# 다이나믹 프로그래밍을 사용할 수 있는 경우
1. 큰 문제를 작은 문제로 나눌 수 있는 경우
2. 작은 문제에서 구한 정답은 그것을 포함한 큰 문제에서도 동일할 경우

# 다이나믹 프로그래밍을 적용했을 때, 시간 복잡도는 O(N)

# 재귀 함수를 이용한 다이나믹 프로그래밍 소드코드 작성하는 방법
    1. 큰 문제를 해결하기 위해 작은 문제를 호출한다
            >> 탑 다운(Top-Down) 방식이라고 부름
# 반복문을 이용하여 소스코드 작성
    2. 작은 문제부터 차근차근 답을 도출한다
            >> 바텀 업(Bottom-Up) 방식이라고 부름

# 문제 푸는 방식
    1. 다이나믹 유형인지 파악
        - 완전 탐색 알고리즘으로 풀 경우에, 시간이 매우 오래 걸리면, 다이나믹 프로그래밍 문제를 통해 풀 수 있는지 파악
        - 해결하고자 하는 부분 문제들의 중복 여부 파악
    2. 재귀 함수로 비효율적인 프로그램 작성 후
        - 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있는 경우,
            메모제이션 기법을 적용해서 구현
    # 재귀 함수를 활용한 탑다운 방식보다는, 바텀업 방식으로 구현하는 것을 권장함
        - 이유 : 시스템 상 재귀함수의 스택 크기가 한정되어 있을 수 있음
