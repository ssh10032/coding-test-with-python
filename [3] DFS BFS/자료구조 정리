# STACK
선입후출(FILO), 후입선출(LIFO) 구조의 자료구조

# QUEUE
선입선출(FIFO)

# DFS/BFS
# DFS는 깊이 우선 탐색
# stack(선입 후출) 자료구조를 사용, 재귀 함수 호출로 구현, 시간 복잡도 O(N)

# DFS의 동작 과정
#1 탐색 시작 노드를 스택에 삽입하고 방문 처리를 한다.
#2 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면, 인접 노드를 스택에 넣고 방문 처리를 한다.
# 방문하지 않은 인접 노드가 없으면 스택에서 최상단 노드를 꺼냄
#3 2번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.

# BFS는 넓이 우선 탐색
# queue(선입 선출) 자료구조를 사용, 시간 복잡도 O(N) 일반적으로 DFS보다 조금 빠름

# BFS의 동작 과정
#1 탐색 시작 노드를 큐에 삽입하고 방문 처리를 함
#2 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리를 함
#3 2번의 과정을 더이상 수행할 수 없을 때까지 반복


# 인접 행렬과 인접 리스트

## 인접 행렬 : 그래프에서 노드간의 연결정보를 2차원 행렬에 저장
# 단점 : 노드 개수가 많을 수록 메모리가 불필요하게 낭비됨
# 그 대신 탐색 속도가 빠름

## 인접 리스트 : 그래프에서 연결된 노드 정보만을 리스트로 저장
# 단점 : 연결 정보를 확인하기 위해서 해당 노드에 연결된 노드를 모두 탐색해야됨
# 메모리가 적게 드는 대신, 탐색 속도가 인접행렬에 비해 느림
